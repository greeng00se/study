# 왜 스프링을 사용하는가?

스프링의 정의를 알아본다면 왜 스프링을 사용하는지 조금은 더 잘 알 수 있지 않을까? 라고 생각되어 스프링의 정의를 알아보았다.

## 스프링의 정의

스프링에 대해 가장 널리 알려진 정의는 다음과 같다.

**자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크**

### 애플리케이션 프레임워크

일반적으로 라이브러리와 프레임워크는 특정 업무 분야나 한 가지 기술에 특화된 목표를 가지고 만들어지지만 스프링은 이와 다르게 ‘애플리케이션 프레임워크’ 라는 특징을 가지고 있다.

> 📌  애플리케이션 프레임워크(Application Framework)
> 
> - 특정 계층이나, 기술, 업무 분야에 국한되지 않고 애플리케이션의 전 영역을 포괄하는 범용적인 프레임워크
> - 애플리케이션 개발의 전 과정을 빠르고 편리하며 효율적으로 진행하는 데 목표를 둔다.

### 경량급(Lightweight)

스프링의 정의 중 경량급은 스프링 자체가 가볍다거나 작은 규모의 코드로 이루어졌다는 뜻이 아니다. 

스프링이 가볍다고 하는 이유는 불필요하게 무겁지 않다는 뜻이다. (과거 EJB와 같은 기술 대비)

### 오픈소스

스프링은 오픈소스 프로젝트 방식으로 개발되어왔다. 적용된 오픈소스 라이선스는 아파치 라이선스 2.0이다.

> 📌  아파치 라이선스 2.0(Apache License 2.0)
> 
> - 누구나 해당 소프트웨어에서 파생된 프로그램을 제작할 수 있으며 저작권을 양도, 전송할 수 있는 라이선스 규정을 의미한다.

### 자바 엔터프라이즈 개발을 편하게

편리한 애플리케이션 개발이란 개발자가 복잡하고 실수하기 쉬운 로우레벨 기술 보단 비즈니스 로직을 빠르고 효과적으로 구현하는 것을 말한다.

스프링은 애플리케이션 개발자들이 스프링이라는 프레임워크가 제공하는 기술이 아니라 자신이 작성하는 애플리케이션의 로직이 더 많은 관심과 시간을 투자할 수 있게 해준다.

스프링은 엔터프라이즈 개발에서 기술적인 요구를 충족하면서도 개발을 복잡하게 만들지 않는다.

## 그래서 왜 스프링을 사용하는가?

내가 생각하는 스프링을 사용하는 이유는 다음과 같다.

1. 개발자가 비즈니스 로직에 집중할 수 있다. (생산성 측면)
2. 스프링 커뮤니티가 거대하기 때문에 정보가 많다. (주니어 개발자가 필요한 정보가 타 프레임워크 대비 월등히 많은 것 같다.)

### 참고 자료

토비의 스프링 3.1, 이일민